<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Neuroglia.Serialization.NewtonsoftJson</name>
    </assembly>
    <members>
        <member name="T:Newtonsoft.Json.AbstractClassConverter`1">
            <summary>
            Represents a <see cref="T:Newtonsoft.Json.JsonConverter"/> used to deserialize implementations of the specified abstract class
            </summary>
            <typeparam name="T">The type of the abstract class to deserialize</typeparam>
        </member>
        <member name="M:Newtonsoft.Json.AbstractClassConverter`1.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="P:Newtonsoft.Json.AbstractClassConverter`1.CanWrite">
            <inheritdoc/>
        </member>
        <member name="M:Newtonsoft.Json.AbstractClassConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Newtonsoft.Json.AbstractClassConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="T:Newtonsoft.Json.AbstractClassConverterFactory">
            <summary>
            Represents a service used to create <see cref="T:Newtonsoft.Json.AbstractClassConverter`1"/>
            </summary>
        </member>
        <member name="F:Newtonsoft.Json.AbstractClassConverterFactory.Converters">
            <summary>
            Gets a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2"/> containing the mappings of types to their respective <see cref="T:Newtonsoft.Json.JsonConverter"/>
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.AbstractClassConverterFactory.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="P:Newtonsoft.Json.AbstractClassConverterFactory.CanWrite">
            <inheritdoc/>
        </member>
        <member name="M:Newtonsoft.Json.AbstractClassConverterFactory.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Newtonsoft.Json.AbstractClassConverterFactory.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="T:Newtonsoft.Json.DynamicValueConverter">
            <summary>
            Represents a <see cref="T:Newtonsoft.Json.JsonConverter"/> used to deserialize dynamic values
            </summary>
        </member>
        <member name="P:Newtonsoft.Json.DynamicValueConverter.CanWrite">
            <inheritdoc/>
        </member>
        <member name="M:Newtonsoft.Json.DynamicValueConverter.CanConvert(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Newtonsoft.Json.DynamicValueConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="M:Newtonsoft.Json.DynamicValueConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc/>
        </member>
        <member name="T:Newtonsoft.Json.JTokenExtensions">
            <summary>
            Defines extensions for <see cref="T:Newtonsoft.Json.Linq.JToken"/>s
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.JTokenExtensions.ToObject(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Converts the specified <see cref="T:Newtonsoft.Json.Linq.JToken"/> into a new object
            </summary>
            <param name="token">The <see cref="T:Newtonsoft.Json.Linq.JToken"/> to convert</param>
            <returns>The converted object</returns>
        </member>
        <member name="T:Newtonsoft.Json.Serialization.NonPublicSetterContractResolver">
            <summary>
            Represents an <see cref="T:Newtonsoft.Json.Serialization.IContractResolver"/> used to resolve properties with non-public setters
            </summary>
        </member>
        <member name="M:Newtonsoft.Json.Serialization.NonPublicSetterContractResolver.CreateProperty(System.Reflection.MemberInfo,Newtonsoft.Json.MemberSerialization)">
            <inheritdoc/>
        </member>
        <member name="T:Neuroglia.Serialization.IServiceCollectionExtensions">
            <summary>
            Defines extensions for <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.Serialization.IServiceCollectionExtensions.AddNewtonsoftJsonSerializer(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Newtonsoft.Json.JsonSerializerSettings})">
            <summary>
            Adds and configures a <see cref="T:Neuroglia.Serialization.NewtonsoftJsonSerializer"/> service
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to configure</param>
            <param name="configurationAction">The <see cref="T:System.Action`1"/> used to configure the <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/> used by the <see cref="T:Neuroglia.Serialization.NewtonsoftJsonSerializer"/></param>
            <returns>The configured <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="M:Neuroglia.Serialization.IServiceCollectionExtensions.AddNewtonsoftJsonSerializer(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds and configures a <see cref="T:Neuroglia.Serialization.NewtonsoftJsonSerializer"/> service
            </summary>
            <param name="services">The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> to configure</param>
            <returns>The configured <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="T:Neuroglia.Serialization.JTokenExtensions">
            <summary>
            Defines extensions for <see cref="T:Newtonsoft.Json.Linq.JToken"/>s
            </summary>
        </member>
        <member name="M:Neuroglia.Serialization.JTokenExtensions.ToObject(Newtonsoft.Json.Linq.JToken)">
            <summary>
            Converts the specified <see cref="T:Newtonsoft.Json.Linq.JToken"/> into a new object
            </summary>
            <param name="token"></param>
            <returns>A new object</returns>
        </member>
        <member name="T:Neuroglia.Serialization.NewtonsoftJsonSerializer">
            <summary>
            Represents the service used to serialize and deserialize JSON
            </summary>
        </member>
        <member name="M:Neuroglia.Serialization.NewtonsoftJsonSerializer.#ctor(Microsoft.Extensions.Options.IOptions{Newtonsoft.Json.JsonSerializerSettings})">
            <summary>
            Initializes a new <see cref="T:Neuroglia.Serialization.NewtonsoftJsonSerializer"/>
            </summary>
            <param name="settings">The service used to access the current <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/></param>
        </member>
        <member name="P:Neuroglia.Serialization.NewtonsoftJsonSerializer.SupportedMimeTypes">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Serialization.NewtonsoftJsonSerializer.DefaultMimeType">
            <inheritdoc/>
        </member>
        <member name="P:Neuroglia.Serialization.NewtonsoftJsonSerializer.Settings">
            <summary>
            Gets the current <see cref="T:Newtonsoft.Json.JsonSerializerSettings"/>
            </summary>
        </member>
        <member name="P:Neuroglia.Serialization.NewtonsoftJsonSerializer.Serializer">
            <summary>
            Gets the underlying <see cref="T:Newtonsoft.Json.JsonSerializer"/> used to serialize and deserialize JSON
            </summary>
        </member>
        <member name="M:Neuroglia.Serialization.NewtonsoftJsonSerializer.Deserialize(System.IO.Stream,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.NewtonsoftJsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.NewtonsoftJsonSerializer.Serialize(System.Object,System.IO.Stream,System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Neuroglia.Serialization.NewtonsoftJsonSerializer.SerializeAsync(System.Object,System.IO.Stream,System.Type,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
    </members>
</doc>
